#!/usr/bin/env ruby

require 'rubygems'
require 'aws/s3'
require 'date'
require 'digest'
require 'net/http'
require 'fileutils'
require 'logger'

module AWS::S3
  class S3Object
    def <=>(other)
      DateTime.parse(self.about['last-modified']) <=> DateTime.parse(other.about['last-modified'])
    end
  end
end

AWS::S3::Base.establish_connection!(
  :access_key_id     => '<%= @id_key %>',
  :secret_access_key => '<%= @secret_key %>'
)

FileUtils.mkdir_p "/db/mongo-backup/"
@logger = Logger.new("/db/mongo-backup/mongo-backup.log", 20, 10500000) # 10 Mb

@databases = `mongo --quiet --eval "for each(var db in db.runCommand('listDatabases').databases) if(db.sizeOnDisk > 1) print(db.name);" admin`.split("\n")
@environment = '<%= @env %>'
@keep = 10 * @databases.length
@bucket = "ey-backup-#{Digest::SHA1.hexdigest('<%= @id_key %>')[0..11]}-mongo"
@tmpname = "#{Time.now.strftime("%Y-%m-%dT%H:%M:%S").gsub(/:/, '-')}"

FileUtils.mkdir_p '/mnt/tmp'
begin
  AWS::S3::Bucket.create @bucket
rescue AWS::S3::BucketAlreadyExists
end

@databases.each do |database|
  token = "#{database}"
  mongocmd = "mongodump -h 127.0.0.1 -d #{database} -o /mnt/tmp/#{token}.#{@tmpname} && tar cjf \"/mnt/tmp/#{token}.#{@tmpname}.tar.bz\" \"/mnt/tmp/#{token}.#{@tmpname}\""
  if system(mongocmd)
    AWS::S3::S3Object.store(
      "/#{@environment}/#{token}.#{@tmpname}.bson.tar.bz",
      open("/mnt/tmp/#{token}.#{@tmpname}.tar.bz"),
      @bucket,
      :access => :private
    )
    FileUtils.rm "/mnt/tmp/#{token}.#{@tmpname}.tar.bz"
    FileUtils.rm_r "/mnt/tmp/#{token}.#{@tmpname}"
    @logger.info "Successful backup: #{database}.#{@tmpname}"
  else
    @logger.error "Unable to dump database #{database}. wtf?"
  end
end

backups = []
backups << AWS::S3::Bucket.objects(@bucket).sort
backups = backups.flatten.sort
backups[0...-@keep].each do |object|
  @logger.info "Deleting: #{object.key}"
  object.delete
end
