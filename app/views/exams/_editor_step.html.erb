<div class="grid_16">
  <%= render :partial => 'exams/breadcrumbs' %>

  <div id="title_video">
    Novo Exame
  </div>
</div>

<script type="text/javascript" charset="utf-8">
//<![CDATA[
$(document).ready(function(){
    reload_questions_index()

    // Remove alternativa
    $("a.remove").live('click', function(e){
      $(this).prev("input[type=hidden]").val("1")
      $(this).parent(".fields").hide()
      reload_questions_index()
      e.preventDefault()
    })

    // Seta o valor do radio baseado no indice da alternativa
    $(".correct").live('click', function(e){
      $(this).parents("fieldset.alternatives:first").find("input[type=radio]").removeAttr("checked").val("0")
      $(this).val("1").attr('checked', 'checked')
    })
})

// Recarrega tiny_mce
function reload_tinyMCE(){
  <%= raw_tiny_mce_init %>
}

// Adiciona numeração das questoes
function reload_questions_index(){
  $("fieldset.questions:not(:hidden) > legend").each(function(i){
    $(this).html("Question " + ($("fieldset.questions:not(:hidden) > legend").index(this) + 1))
  })
}

// Adiciona alternativas ou questões
function add_fields(link, association, content) {
    var new_id = new Date().getTime();
    var regexp = new RegExp("new_" + association, "g");
    $(link).before(content.replace(regexp, new_id));

    removeAllMce()
    reload_tinyMCE()
    reload_questions_index()
}

function removeAllMce(){
  var i, t = tinyMCE.editors;
  for (i in t) {
      if (t.hasOwnProperty(i)) {
          t[i].remove();
      }
  }
}

//]]>
</script>
<div class="grid_16">
  <%= f.error_messages %>

  <% form_for @exam do |f|  %>
    <% f.fields_for :questions do |builder| %>
      <%= render "question_fields", :f => builder %>
    <% end %>
    <%= link_to_add_fields "Adicionar questão", f, :questions %>
  <% end %>

  <%= hidden_field_tag("step", "editor")%>

</div>
