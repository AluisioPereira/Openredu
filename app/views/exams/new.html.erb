
<!--
#preloader {
    display: none;
    background: #FFF;
    opacity: 0.6;
    width: 100%;
    height: 320px; /* 320 */
    text-align: center;
    line-height: 100%; /*320 */
    position: absolute;
    top: 0px;
    z-index: 99;
}


TODO:

- colocar numeracao das alternativas
- remover alternativa
- salvar questao
- verificar dados de input
- publica

- aparecer questao na prova
- mover questao
- editar questao
- remover questao

// Ao salvar:
			// verificar 
				
			// fazer chamada ajax ao controler de new question
			// mostrar loading
			// caso sucesso, fechar janela e mostrar questao adicionada ao formulario


-->

<script>
	
		/* *****************************
	 * 		Utils
	 * 
	 *******************************/
	function createTable(opt_className){
	    var el = document.createElement("table");
	    if (opt_className) {
	        el.className = opt_className;
	    }
	    return el;
	}
	
	function createTableRow(table, opt_rowId){
	    var tr = table.insertRow(-1);
		if (opt_rowId) {
			tr.id = opt_rowId;
		}
		
	    return tr;
	}
	
	function createTableCell(tr, opt_className){
	    var td = tr.insertCell(-1);
	    if (opt_className) {
	        td.className = opt_className;
	    }
	    return td;
	}
		
	var alternativesTable;
	var altCount = 0;
	var altId = 0;
	function newQuestion(){
		
		resetFields();
		
		$('thepopup').appear();
		
		alternativesTable = createTable();
		
		// adiciona alternativas
		 for (var i = 0; i < 4; i++) {
		 	addAlternative();
		 }
		
		 var questionsDiv = document.getElementById('alternatives');
		 questionsDiv.appendChild(alternativesTable);
	}
	
	
   
	
	function addAlternative(){
		// TODO usar setAttribute
		var alternative = document.createElement("input");
		 alternative.type = 'radio';
		 alternative.name = 'answer';
		 alternative.value = altId;
		 alternative.id = 'answer_radio_'+altId;
		 
		 var statement = document.createElement("input");
		 statement.type = 'text';
		 statement.name = 'alternative[statement][]';
		 statement.id = 'alternative_statement_' + altId ;
		 
		 //questionsDiv.appendChild(alternative);
		 //questionsDiv.appendChild(statement);
		 
		 
		 var alternativeRow = createTableRow(alternativesTable, altId);
		
		 var alternative1Cell = createTableCell(alternativeRow);
		 alternative1Cell.appendChild(alternative);
		 
		 var alternative2Cell = createTableCell(alternativeRow);
		 alternative2Cell.appendChild(statement);  
		 
		  var alternative3Cell = createTableCell(alternativeRow);
		 alternative3Cell.innerHTML = '(<a href="#" onclick="removeAlternative(this)">remove</a>)';  
		 
		 altCount++;
		 altId++;
		 
		 if (altCount >= 7) {
		 	$('add_alternative_link').hide();
		 }
		 
	}
	
	 function removeAlternative(linkObj){
    
        //var altRow = document.getElementById(rowId);
        //	altRow.innerHTML ="";
       
		
		var rowObj = linkObj.parentNode.parentNode;
		var rIndex = rowObj.sectionRowIndex;
		rowObj.parentNode.deleteRow(rIndex);
		
		altCount--;
		
		 if (altCount < 7) {
		 	$('add_alternative_link').show();
		 }
		
    }
	
	function closePopup(){
		$('thepopup').hide();
		resetFields();
	}
	
	function resetFields(){
		document.getElementById('alternatives').innerHTML = '';
		altCount = 0;
		altId = 0;
		$('add_alternative_link').show();
		document.getElementById('question_statement').value = '';
		//$('question_statement').val('');
	}
	function itemLoading(){
		// TODO
		
	}
	
	function validateForm(){
		//se o cara assinalou a alternativa correta 
		//se tem pelo menos uma alternativa
		
		var checked = false;
		var els = document.getElementsByName('answer');
		for (var i = 0; i < els.length && !checked ; i++) {
			checked = checked || els[i].checked;
		}
		if (!checked) {
			alert('Você precisa selecionar uma alternativa correta');
			return false;
		}
		
		return true;
	}
	
 </script>

<h1>Novo teste</h1>

<% form_for(@exam) do |f| %>
  <%= f.error_messages %>
  
  <p>Nome: <%= f.text_field :name %> </p>
  
  <%= link_to_function 'Nova questão', "newQuestion()" %> | 
  <%= link_to 'Adicionar questão...', questions_path %>
 
 <hr>
  <div id="questions" style="min-height: 100px;">
  	
  </div>
  
  <hr>

 <p>
    <%= f.submit 'Salvar' %>
  </p>
<%= link_to 'Voltar', exams_path %>
<!-- colocar um efeito do scriptaculous -->
    
  
 
<% end %>
  
  
  <div id="thepopup" style="display:none; width:500px; min-height:300px; background:#FFF; border:1px solid #333; position:absolute; top: 150px; left: 350px; overflow: auto;" >
  						 
	<% form_remote_tag :update => "questions",
                       :url => { :controller => :questions, :action => :create },
                       :position => "bottom", #before e after nao funcionam com o :update
						:loading => 'itemLoading()', 
					    :complete => "closePopup()" do %>
	
	<div id="popup_content" style="padding: 8px 5px 8px 5px">
  	  Nova questao | <a href="#" onclick="closePopup(); return false;">Fechar</a>
	  <hr>
	  
	  <!-- isso aqui poderia ser um render partial? -->
	  <div id="question">
	  	<label>Enunciado: </label><BR>
		<textarea rows="2" cols="50" name="question[statement]" id="question_statement"></textarea>
		 <br>
		Alternativas: <br>
		<div id="alternatives"></div>
		<BR>
		<a href="#" id="add_alternative_link" onclick="addAlternative();">Adicionar alternativa (max. 7)</a>
		<hr>
		Pública?<input type="checkbox" name="question[is_public]" value="true" /><BR>
		Associar competências | <!-- <a href="#" onclick="saveQuestion();">Salvar</a>--> <%= submit_tag 'Salvar', :onclick => "return validateForm()"  %>
  	  </div>
	  
  	</div>
	

  <% end -%>

	
  </div>
  
  




