 <script>
 	function saveDraft(opt, opt_param){
        var theform = document.getElementById('exam_form');
		var theattribute = document.getElementById('sbt_opt');
		
		// Atributo opcional (usado para passar o id da questão para editar)
		if (opt_param) {
			var theoptattribute = document.getElementById('opt_param');
			theoptattribute.value = opt_param;
		}
		theattribute.value = opt;
		theform.submit();
    }
	
	function publishExam() {
		var confirm_msg = "Uma vez publicado, o exame não poderá ser editado nem removido. Deseja continuar?";
		if (confirm(confirm_msg)) {
			saveDraft(5);
		} 
		
	}
	
	
	var isPreview = false;	
	function save(preview){
		jQuery('#sbt_opt').val('0');
		
		isPreview = preview;
		jQuery.ajax({
			beforeSend:function(request){
				$('#save-spinner').show();
				}, 
			complete:function(request){
				$('#save-spinner').hide();
				if (isPreview) {
					window.open('<%= answer_exam_path(:id => @exam.id, :first => true) %>');
				}
				},
			data:jQuery.param(jQuery("#exam_form").serializeArray()), 
			dataType:'script', 
			type:'post', 
			url:'<%= url_for(:action => :create, :exam_id => @exam.id)%>'});
	}
	/////
	

function remove_fields(link) {
  $(link).prev("input[type=hidden]").val("1");
  $(link).closest(".fields").hide();
}

function add_fields(link, association, content, type) {
  var new_id = new Date().getTime();
  var regexp = new RegExp("new_" + association, "g")
 
 	if (jQuery('#question').length > 6) {
  	return;
  }
 
	if (type == 'Alternative') {
		 $(link).before(content.replace(regexp, new_id));
  } else if (type == 'Question') {
		 $(link).parent().after(content.replace(regexp, new_id));
  	removeAllMce();
  	reloadMce();
  }
}

function removeAllMce(){
        var i, t = tinyMCE.editors;
        for (i in t) {
            if (t.hasOwnProperty(i)) {
					t[i].remove();
            }
        }
        
    }
		
			function reloadMce(){
		<%=   raw_tiny_mce_init %>
	}
	
	
	
	/*
$('body').click(function(event) {
    if (!$(event.target).closest('.expanded').length) {
        
				$('.expanded').hide()
				$('.mirrowed').show()
				var elName = $(event.target)
				alert(elName);

    };
  });
	
	

*/
	
jQuery(document).ready(function(){
		 $('.question').click(function(e){
		 	//var elId = $(this).attr("name")
			$(event.target).toggle();
			/*
alert(elId); //question_19
				nameE = "[name='"+elName+"'] .expanded"
				nameM = "[name='"+elName+"'] .mirrowed"
				$(nameE).hide();
				$(nameM).show();
*/
		 });
	});

		
	 </script>
 

<div class="grid_16">
<div id="breadcrumbs">
		<% if @school %>
	<a href="<%=application_url%>">início</a> > <a href="#">redes</a> > <%= link_to @school.name, @school %> > novo exame simples
	<% else %>
	<a href="<%=application_url%>">início</a> > <a href="#">ensinar</a> > novo exame simples
	<%end %>
</div>
</div>
	
<%= render(:partial => "schools/school_info", :locals=>{:show => false}) if @school%>

<div id="title_video">Novo Exame</div>

<div class="grid_9 push_3">
<table class="booking_steps" cellpadding="0" cellspacing="0">
							<tbody><tr>
								<td><span class="book_step"><span><em>1</em>Informações Gerais</span></span></td>
								<td class="spacer">&nbsp;</td>
								<td><span class="book_step current"><span><em>2</em>Editor de Exame</span></span></td>
								<td class="spacer">&nbsp;</td>
								<td><span class="book_step disabled"><span><em>3</em>Publicação</span></span></td>
							</tr>
						</tbody></table>
</div>
<!--
<h3 class="call">Novo Exame</h3>
-->


	<div class="submenu grid_15">
		<%= link_to_function 'Nova questão', 'saveDraft(1)', :class => "button" %>
		<%= link_to_function 'Adicionar questão', 'saveDraft(2)', :class => "button" %>
		<%= button_to_function "Visualizar", "save(true)"%>
		<%= button_to_function "Salvar parcialmente", "save(false)", :id => "save_btn"%><%= image_tag 'spinner.gif', :id => 'save-spinner', :style => 'display: none' %>
		<span class="snippet" id="save_info"></span>
	</div>


	

 <% form_for :exam, @exam, :url => { :action => "create" },  :html => {:id => 'exam_form'} do |f| %>
 
 <div class="grid_16">
  <%= f.error_messages %>
	</div>
 
  <%= hidden_field_tag("school_id", @school.id) if @school %>
 
  <%= hidden_field_tag("step", "2", options = {})%>
  <%= hidden_field_tag("exam_type", "simple", options = {})%>
  <%= hidden_field_tag('sbt_opt', 0) %>
  <%= hidden_field_tag('opt_param', 0) %>
  <%= f.hidden_field(:id, :value => @exam.id) %>
 
 <div class="grid_8">
 <div id="questions" style="min-height: 100px;">
 
 
  <% f.fields_for :questions do |builder| %>
    <%= render "question_fields", :f => builder %>
  <% end %>
 
 
 

 	 <%= link_to_add_fields 'Nova Questão', f, :questions, 'Question' %>
 
 
 
 
 </div>
 
 
 <%= sortable_element 'questions',
:url => { :action => "sort_question" , :id => @exam },
:complete => visual_effect(:highlight, 'questions'),
 :tag => 'div', :scroll => true
%>
  
</div>
<div class="grid_6 push_1">
	<div class="y_addinfo">
                                <div class="addinfocontent">
                                    <h1>
                                       Adicione questões do banco de dados!</h1>
                                    <p>
                                       Por favor não publique conteúdo que esteja protegido por direitos autoriais, conteúdo obceno ou que viole
																			 os do Redu.</p>
																			
                                </div>
                            </div>
</div>

<div class="grid_16">

<%= link_to '< Anterior', new_exam_path(:step => '1'), :class => "button" %> 
<%= f.submit 'Próximo >' %> 

  <%= link_to 'Descartar e Voltar', cancel_exams_path, :confirm => "Tem certeza que deseja sair do editor de exames?" %>
</div>
  
  
 <% end %>
 

</div>

 
 
 
 
 
 
 
 
 