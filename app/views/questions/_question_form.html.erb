<script>
	
		
	var alphabet = ["a", "b", "c", "d", "e", "f", "g", "h", "i"];
	
	var MAX_NUMBER_ALT = 7
	var altCount = 0;
	//var altId = 0;

	function addAlternative(){
		
		altCount = document.getElementsByName('answer').length;
		
		if (altCount >= MAX_NUMBER_ALT) {
			return;
		}
		else {
		
			// TODO usar setAttribute
			var alternative = document.createElement("input");
			alternative.type = 'radio';
			alternative.name = 'answer';
			//alternative.value = altId;
			alternative.id = 'answer_radio';
			
			var statement = document.createElement("input");
			statement.type = 'text';
			statement.name = 'alternative[statement][]';
			statement.id = 'alternative_statement';
			
			
			 var alternativeDiv = document.createElement("div");
		 	alternativeDiv.id = 'alternative';
			
			
			alternativeDiv.appendChild(alternative);
			alternativeDiv.innerHTML += " ";
			alternativeDiv.appendChild(statement);
			alternativeDiv.innerHTML += ' (<a href="#" onclick="removeAlternative(this); return false;">remove</a>)';

			document.getElementById("alternatives").appendChild(alternativeDiv);
			
			altCount++;
			altId++;
			
			recalculateAnswerIndex();
			
			if (altCount >= 7) {
				$('add_alternative_link').hide();
			}
		}
		 
	}
	
	
	 function removeAlternative(linkObj){
    
		var divObj = linkObj.parentNode;
		document.getElementById('alternatives').removeChild(divObj);
		
		recalculateAnswerIndex();
		
		altCount--;
		
		 if (altCount < 7) {
		 	$('add_alternative_link').show();
		 }
		
    }
	
	function recalculateAnswerIndex(){
		var answersEl = document.getElementsByName("answer");
		
		for (var i = 0; i < answersEl.length; i++) {
			answersEl[i].value = i;
			answersEl[i].tabindex = i + 1;
		}
	}
	
	
	function validateForm(){
		//se o cara assinalou a alternativa correta 
		//se tem pelo menos uma alternativa
		
		var checked = false;
		var els = document.getElementsByName('answer');
		for (var i = 0; i < els.length && !checked ; i++) {
			checked = checked || els[i].checked;
		}
		if (!checked) {
			alert('Você precisa selecionar uma alternativa correta');
			return false;
		}
		
		// Selecionar uma categoria:
		/*
		var selector = document.getElementById('question_skill_id');
		var selected = false;
		for (var i = 0; i < selector.options.length && !selected ; i++) {
			selected = selected || selector.options[i].selected;
		}
		if (!selected) {	
			alert('Por favor, selecione uma sub categoria');
			return false;
		}*/
		
		return true;
	}
	
    function textCounter(field, cntfieldId, maxlimit){
		var cntfield = document.getElementById(cntfieldId);
		
        if (field.value.length > maxlimit) // if too long...trim it!
            field.value = field.value.substring(0, maxlimit);
        // otherwise, update 'characters left' counter
        else 
            cntfield.innerHTML = maxlimit - field.value.length;
    }
	// page["notice"].replace_html flash[:notice] 
	
	function selectCategory(selector, selectType){
        // selectType
		// 1 = category1
		// 2 = category2
		// 3 = question_skill_id
		
		var selectedValue = selector.options[selector.selectedIndex].value;
		
		if (selectedValue < 0 || selectType > 2) {
			return;
		} else { 
		
		var nextSelector;
		if (selectType == 1) {
			nextSelector = document.getElementById('category2');
			document.getElementById('question_skill_id').options.length = 0; // reseta
		} else { // selectType == 2
			nextSelector = document.getElementById('question_skill_id');
		}
        
  		new Ajax.Request("<%= url_for :controller => :skills, :action => :sub_categories_of %>", {
            method: 'get',
            parameters: "?parent_id= " + selectedValue,
			onLoading: Element.show('spinner'),
            onComplete: function(request){
				Element.hide('spinner');
				//alert(request.responseText);
                res = eval("(" + request.responseText + ")");
				
				nextSelector.options.length = 0;
				
				for (var i = 0; i < res.length; i++ ) {
					nextSelector.options[i]=new Option(res[i][0],res[i][1], false, false);
				}
				
            }
        });
		}
    }
	

	
 </script>


<% form_for(@question, :html => {:onsubmit => "return validateForm();"}) do |f| %>
  <%= f.error_messages %>

<%= hidden_field_tag("exam_type", exam_type, options = {})%>


	<div id="popup_content" style="padding: 8px 5px 8px 5px">
	  
	  <!-- isso aqui poderia ser um render partial? -->
	  <div id="question">
	  	<label>Enunciado: </label><BR>
		
		<%= f.text_area :statement, :size => "60x12", :class => "mceEditor" %>
 
 			<!--
		:onKeyDown => "textCounter(this,'st_chars_left',400);",
		:onKeyUp => "textCounter(this,'st_chars_left',400);" --> 
		<!-- f.tinymce :statement -->
		 
		 <br>
		 
		Alternativas: <br>
		<div id="alternatives">
			<!-- table?? -->
			<% if @question.alternatives && @question.alternatives.length > 0%> 
			
				<% @question.alternatives.each do |alternative| %>
					<% a_index = @question.alternatives.index(alternative) %>
					
					<div id="alternative">
						<span id = "alt_letter_<%= a_index %>"><script>alphabet[1]</script></span>
						<% if @question.answer_id == alternative.id %>
							<%= radio_button_tag("answer", a_index, true) %> 
					    <% else %>
							<%= radio_button_tag("answer", a_index, false) %> 
						<% end %>
						
						<%= text_field_tag 'alternative[statement][]', alternative.statement, {:tabindex => a_index + 1}   %>
						(<a href="#" onclick="removeAlternative(this)">remove</a>)
					
					</div>
				<% end %>
			<% else %>
				<% for a_index in 0..4 %>
					<div id="alternative">
						<span id = "alt_letter_<%= a_index %>"><script>alphabet[1]</script></span>
						<%= radio_button_tag("answer", a_index, false) %>	
						<%= text_field_tag 'alternative[statement][]', nil, {:tabindex => a_index + 1}  %>
						(<a href="#" onclick="removeAlternative(this); return false;">remove</a>)
					</div>
				<% end %>
			<% end %>
		</div>
		<BR>
		<!-- <a href="#" id="add_alternative_link" onclick="newQuestion();">new question (temp)</a> -->
		<a href="#" id="add_alternative_link" onclick="addAlternative(); return false;">Adicionar alternativa (max. 7)</a>
		<hr>
		Justificativa da resposta (tirar o tiny?):
		<%= f.text_area :justification, :rows =>2, :cols => 50, :class => "mceEditor" %>
		<hr>
		<%= f.check_box :public, :options => {:checked => true} %> Pública?
		<BR>
		<BR>
		Categoria <%= image_tag("spinner.gif",
              :align => "absmiddle",
              :border => 0,
              :id => "spinner",
              :style =>"display: none;" ) %><BR>
		
		<%= select_tag(:category1, '<option value="-1">-- Selecione uma categoria --</option>' + options_from_collection_for_select((Skill.all(:conditions => "parent_id IS NULL")), :id, :name), :size => 5, :onchange => "selectCategory(this, 1);", :style => "width: 200px;") %> 
		<%= select_tag(:category2, '<option value="-1">-- Sem subcategorias ainda --</option>', :size => 5, :onchange => "selectCategory(this, 2);", :style => "width: 200px;") %> 
		<%= f.select(:skill_id, '<option value="-1">-- Sem subcategorias ainda --</option>', {}, :size => 5, :onchange => "selectCategory(this, 3);", :style => "width: 200px;") %> 
		<BR>
		<p>
		    <%= f.submit 'Salvar' %>
		  </p>
  	  </div>
	  
  	</div>  



  
<% end %>

